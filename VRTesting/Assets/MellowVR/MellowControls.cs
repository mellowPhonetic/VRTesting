//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/MellowVR/MellowControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace MellowVR
{
    public partial class @MellowControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MellowControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MellowControls"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""473f98f1-1b32-4fd5-ba5a-20ddae7e4c46"",
            ""actions"": [
                {
                    ""name"": ""Continuous"",
                    ""type"": ""Value"",
                    ""id"": ""bcfbf274-2873-44d0-8b45-e89eab45d3a1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Projection"",
                    ""type"": ""Button"",
                    ""id"": ""dacd31ba-38bb-4ab8-a3f0-f58980f57b44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TeleportLeft"",
                    ""type"": ""Button"",
                    ""id"": ""814737a0-5539-4732-81e3-3faf0ab764c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TeleportRight"",
                    ""type"": ""Button"",
                    ""id"": ""4b6dab1c-c1d0-4445-9845-6156f194c41d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpaceDragLeft"",
                    ""type"": ""Button"",
                    ""id"": ""dfb3e31d-0e1a-44a0-adc7-c11c3f9cb066"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpaceDragRight"",
                    ""type"": ""Button"",
                    ""id"": ""213fc3ff-7213-4e7a-988f-e82a8cd33c46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b2ce2ad7-46e8-4b79-ac6b-827bda57f327"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""aa6b3e1e-a502-4abf-b09f-15645ef4f7f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a0405f28-9347-4747-8ade-24e844205d2b"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Continuous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a01177ce-055f-4860-9532-3fd5a256d93d"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TeleportLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2eef6a1e-8235-4f35-a463-44daf303596d"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpaceDragLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""331310b9-4118-48cf-8ddc-5ca40a7e5f84"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Projection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""965600c5-4944-42e9-b1ee-1e160badcaa0"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4acb5b48-c8c3-4cea-9146-816c5a4018ad"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b2edfa5-c1a7-4287-948b-e00ee58349c0"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TeleportRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""756520df-e294-44e9-9ba9-f0c31cbba0ac"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpaceDragRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Turn"",
            ""id"": ""4204e9ef-6acd-4d1b-959e-f424bde1b12a"",
            ""actions"": [
                {
                    ""name"": ""Continuous"",
                    ""type"": ""Value"",
                    ""id"": ""845ef40a-9407-48ee-ab10-23b0e7074592"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Snap"",
                    ""type"": ""Value"",
                    ""id"": ""170e66ed-4a3f-468d-a70d-ae800ca53f6b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SpaceTurnLeft"",
                    ""type"": ""Button"",
                    ""id"": ""9e3823ef-6866-44a9-bd8c-af2137c66fa7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpaceTurnRight"",
                    ""type"": ""Button"",
                    ""id"": ""63d4e903-4409-42f2-a4aa-b0b74a6353a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""230266a7-6114-4014-8e14-387918223b62"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Continuous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f15370ac-fe16-41b5-9c9a-98542a180ecd"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpaceTurnLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9049bd3-39bc-4284-b802-60917361344c"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Snap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1d37f33-03ee-4b50-abe6-c133aa6c5089"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpaceTurnRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Grab"",
            ""id"": ""59979391-581b-44bf-a313-bdb1f1e7d84c"",
            ""actions"": [
                {
                    ""name"": ""LeftHand"",
                    ""type"": ""Button"",
                    ""id"": ""d3afa21a-430d-4e2e-8acb-dd90f99f8822"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightHand"",
                    ""type"": ""Button"",
                    ""id"": ""72e3870a-bd3b-4a52-842d-c93992684444"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a627f066-679c-4847-b621-a070488e8745"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eee3757e-b198-433a-ac22-3644c0ffc005"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Head"",
            ""id"": ""d2000c43-306b-44e3-a174-ed98fa1d06fd"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""b645c7c6-00de-4e77-9f35-b873d2169bb9"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""22e63226-10fe-4153-95e3-9df0155e3970"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""d6043796-1e46-4826-9406-0676d9496da7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""ee3f49fb-960b-45cd-b94f-693d4b4cc701"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Eye Gaze Position"",
                    ""type"": ""Value"",
                    ""id"": ""a8404f2f-c2de-4b2a-991d-2e79b51c62da"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Eye Gaze Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""50173bd2-7b2e-4bf4-9de1-660e02553b79"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Eye Gaze Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""d8a0b2e6-8bf4-4d38-b31c-1ffb055db20d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Eye Gaze Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""c7975bc9-be74-4610-9f20-03e43bfc8c2c"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c06cbde5-e638-4665-bcd8-efd53f9f5e9a"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""965f07e2-f152-4069-8162-0fcc8e9af167"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""28f692f6-3400-407b-bade-c3478e5afb2b"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""fc7a5373-c063-4171-972b-ec2746ac7ee8"",
                    ""path"": ""<EyeGaze>/pose/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""1f0c76ff-9aab-4672-951e-129f1fac7be3"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""ffcf4413-a53c-4e86-af1a-7f796b9bee85"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""ee2e74b3-82c6-4e46-9d44-72f930ff43f7"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""ec0beed4-e8c4-4760-8c58-a1073f36ac1b"",
                    ""path"": ""<EyeGaze>/pose/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""01d2763d-2a44-4b4a-abeb-06b9e3dfce22"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""4e097f1c-1380-48f1-9fd8-d840c022ee7b"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Integer Fallback"",
                    ""id"": ""116b44ba-f0a4-4222-a2aa-a1fd139a15f7"",
                    ""path"": ""IntegerFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Tracking State"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""5877aa8a-f315-492e-a718-a5586784f1ac"",
                    ""path"": ""<EyeGaze>/pose/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""06b98923-d249-447e-bfdd-b33026aad7bc"",
                    ""path"": ""<XRHMD>/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""8165d3c2-b69e-49c1-a90e-098c69b71b10"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""424e86e6-ecb1-4884-9f34-8bbd6cb3b008"",
                    ""path"": ""<XRHMD>/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a08ef7f-982c-4c0f-ba2d-2550db1252aa"",
                    ""path"": ""<XRHMD>/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Button Fallback"",
                    ""id"": ""977a2f13-e0c8-4748-a64c-0efe990381c6"",
                    ""path"": ""ButtonFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Is Tracked"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""4b66a141-a744-45cf-a489-8a653f95910a"",
                    ""path"": ""<EyeGaze>/pose/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""e17bdab8-4fba-49ee-807c-914043237fd1"",
                    ""path"": ""<XRHMD>/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""6a6eecdc-7dd5-4a31-9ff0-0af0647b6317"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""LeftHand"",
            ""id"": ""4e54f2e3-42a5-4a90-9e68-87cefc47d91d"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""3846f648-cbab-4bff-9dce-09475435b8ad"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""85e8153c-5649-4cca-b8e8-aeb8bfdd1057"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""143f46ae-f2e1-44e4-813f-8d055e1db333"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""ad3bf18f-4c0d-41b4-9e37-cf44f0e76315"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""74107d0c-40e3-4613-9041-cc0755747fce"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim Position"",
                    ""type"": ""Value"",
                    ""id"": ""f676f325-4dbf-4eff-9486-2ded581fc311"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""0d2f2724-fb81-4fd5-915a-b0cd5022f277"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Flags"",
                    ""type"": ""Value"",
                    ""id"": ""ef502740-086a-4d18-8d84-596254f5a845"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Position"",
                    ""type"": ""Value"",
                    ""id"": ""fe648faf-c01f-4ebc-8ff3-b81141c91f2a"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Position"",
                    ""type"": ""Value"",
                    ""id"": ""48a899a3-3af4-4e1f-97fa-403a9702f526"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""4db31cf7-07f7-4f4b-acaf-4667d3140773"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""ba6259a6-2aa9-423b-a7ef-d627a23b8932"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""a0665c4f-3a24-4b06-bca7-29eeaaa0ad1d"",
                    ""path"": ""<XRController>{LeftHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""5ef6d99e-1ada-440c-b55a-471d39620126"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""ea3798fd-ca10-4669-98cf-b4279fe5fd26"",
                    ""path"": ""<XRHandDevice>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""f0235732-fcb4-4338-9100-754568962cd7"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""ea6904c8-6927-4f5b-ba48-92198e1c7fcd"",
                    ""path"": ""<XRController>{LeftHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""0777d592-4f6e-4d57-9b67-614151377f03"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""053359ce-efc2-44b0-98f5-605bafd07480"",
                    ""path"": ""<XRHandDevice>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d152b2fc-d501-4a26-adc2-f7ec215e2a74"",
                    ""path"": ""<XRController>{LeftHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f44e650-5d3a-49e2-b11e-08a5f0d4ba46"",
                    ""path"": ""<XRController>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""830f9e10-369c-4e74-9400-570716b9641c"",
                    ""path"": ""<XRHandDevice>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f452a6a-accd-4534-9e5a-7a333dfe17ab"",
                    ""path"": ""<MetaAimHand>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8001ab47-6bf9-42f2-8a9f-9b83c4cd43bf"",
                    ""path"": ""<MetaAimHand>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5bba3ae7-accf-447e-a1e2-1493e82c23cf"",
                    ""path"": ""<XRHandDevice>{LeftHand}/pinchPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Pinch Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d31fe00-b1a5-4ebf-bf99-d6cec56fddeb"",
                    ""path"": ""<XRHandDevice>{LeftHand}/pokePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Poke Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d79928b-626a-42f4-bfd8-5310c0ffacb1"",
                    ""path"": ""<XRHandDevice>{LeftHand}/pokeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Poke Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c47200e8-7120-4220-9c6c-bbbac5edc937"",
                    ""path"": ""<XRController>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9361435-1b5a-4b4e-b12a-a678cf5a0acc"",
                    ""path"": ""<XRHandDevice>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c31e532-5a79-47e2-b87a-2825048f49a3"",
                    ""path"": ""<MetaAimHand>{LeftHand}/aimFlags"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Flags"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightHand"",
            ""id"": ""8ca3285e-f6cc-451d-a3d4-ea8293b8b3ca"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""f64cec1a-ddcf-434f-b6da-3bf32a47f2b2"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""3271eae0-0e36-4913-9d89-6c07c49863f1"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""4cb99666-1f09-4786-974a-78a7ee7e27c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""88314bfc-ea1d-4bfb-89cc-249b2634ec8a"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ed667005-e395-4d4d-b4c9-3672765bef51"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim Position"",
                    ""type"": ""Value"",
                    ""id"": ""08c16258-c999-4977-9678-d460d9d92685"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""69bbcd52-41aa-4f15-a4bc-accf10f4c6e7"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Flags"",
                    ""type"": ""Value"",
                    ""id"": ""9fe706ce-d066-49df-9ee6-5862d742c58d"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Position"",
                    ""type"": ""Value"",
                    ""id"": ""3b5fead8-9f42-436b-a094-95d093484f6a"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Position"",
                    ""type"": ""Value"",
                    ""id"": ""a557c9a1-d071-487a-a3a8-9d3a01dbed8c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""3ea15299-de8e-4029-9865-bf68eca85a72"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""d3752f02-6614-4fe0-916e-242d73f06e28"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""e4e83600-e785-4f5c-b388-d2eb878e86ed"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""95bc589d-90bb-4c3a-8ed4-cac6ebbec5e4"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""af78d521-9c0f-4012-af3e-fe9721810806"",
                    ""path"": ""<XRHandDevice>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""7e957cf1-7645-4f0d-867d-b464e8cff931"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""6145ae95-1353-4c5a-ab81-70a5f060f69e"",
                    ""path"": ""<XRController>{RightHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""5cd289cc-90bb-48d3-8ff1-798ddcf680d8"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""34f2ddf2-fcc1-4fa2-b205-43410fe977f9"",
                    ""path"": ""<XRHandDevice>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1ab0cf16-89a1-4de4-a007-5a1d067d4def"",
                    ""path"": ""<XRController>{RightHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6990d2cb-b02d-47f6-8306-d22ad406049f"",
                    ""path"": ""<XRController>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""647c450c-936d-42e9-aebc-026d837ba81a"",
                    ""path"": ""<XRHandDevice>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41cef0d3-dbb8-4583-875e-1eff64a03822"",
                    ""path"": ""<MetaAimHand>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""277968f2-4c4a-4660-8c21-9e49ad91d867"",
                    ""path"": ""<MetaAimHand>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52cd8ccb-c602-4e4d-b698-5dca7d3e19a7"",
                    ""path"": ""<XRHandDevice>{RightHand}/pinchPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Pinch Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""adc5b811-bbd4-4efe-b639-2c06041f5ef0"",
                    ""path"": ""<XRHandDevice>{RightHand}/pokePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Poke Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d33f50d-74c9-41d3-8724-a4a4fd4ced2c"",
                    ""path"": ""<XRHandDevice>{RightHand}/pokeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Poke Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55a99cac-34bb-43fc-a811-ad1fb832ef84"",
                    ""path"": ""<XRController>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66c42771-2946-409b-bb40-7d3c22348338"",
                    ""path"": ""<XRHandDevice>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b229103-c5be-46b8-bb65-007432ea7629"",
                    ""path"": ""<MetaAimHand>{RightHand}/aimFlags"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Flags"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hip"",
            ""id"": ""02d664ed-93fd-4e34-b7f1-2c0aa2e4fea7"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""ca707284-0235-481d-91ed-494ab6ff9cf3"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""06eb1f9a-6977-411c-87e3-c6c3e247fecf"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""0cb7482d-f934-4689-b304-e06564bcf117"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""05c0da49-3846-4e97-895d-c87da0037cfa"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a04dc12b-e2a0-49af-ab27-1bd2ef50753f"",
                    ""path"": ""<XRViveTracker>{Waist}/devicePose/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a45f1561-a703-405c-a5e7-4b3e0903b689"",
                    ""path"": ""<XRViveTracker>{Waist}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d3635ef-5bac-41ee-b3da-80e9d4671226"",
                    ""path"": ""<XRViveTracker>{Waist}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f46d39c-9265-4793-932c-7ed6138ad6af"",
                    ""path"": ""<XRViveTracker>{Waist}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftFoot"",
            ""id"": ""83f13cb0-cd81-4b38-97eb-0fd1324e77ec"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""1a3c631b-4130-4407-b5b5-b40f4db8e780"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""85e15823-1f17-4309-ad1a-40719a7b2381"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""8a844278-c533-40fe-84c4-b68a5b6ad3ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""074c5e59-8f98-4d8d-a923-c78184e842d3"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d23d509e-1786-4f74-b4b3-19846fa1db20"",
                    ""path"": ""<XRViveTracker>{Left Foot}/devicePose/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ecbc154-199c-4fe7-a14b-7676c9db4275"",
                    ""path"": ""<XRViveTracker>{Left Foot}/devicePose/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f7db6b2-a7c5-4539-a81b-26d33e6606ad"",
                    ""path"": ""<XRViveTracker>{Left Foot}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0aa2676a-3bc5-47d8-a651-c67fdcc1f1a4"",
                    ""path"": ""<XRViveTracker>{Left Foot}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightFoot"",
            ""id"": ""fe25daad-bf1b-47ab-aceb-5cf1665ca55b"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""50cfcda1-e4d3-4515-bb22-cc74953f1ad8"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""f2045bb0-4cc2-46de-8663-a4df21571218"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""3804a10d-7492-489f-a464-421ef4e3b9de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""1178ab2c-09a8-4ae1-ba7c-ff168eaefc1f"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e7f01815-9106-4d4f-9f9d-ae1897f51cd3"",
                    ""path"": ""<XRViveTracker>{Right Foot}/devicePose/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8272f2f6-6066-4986-bbfa-cf9a4b7d5d21"",
                    ""path"": ""<XRViveTracker>{Right Foot}/devicePose/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09271304-86e0-4481-b615-2014bc9a1656"",
                    ""path"": ""<XRViveTracker>{Right Foot}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e19d8af-d1ee-455b-ae52-6f0086fbd137"",
                    ""path"": ""<XRViveTracker>{Right Foot}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Move
            m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
            m_Move_Continuous = m_Move.FindAction("Continuous", throwIfNotFound: true);
            m_Move_Projection = m_Move.FindAction("Projection", throwIfNotFound: true);
            m_Move_TeleportLeft = m_Move.FindAction("TeleportLeft", throwIfNotFound: true);
            m_Move_TeleportRight = m_Move.FindAction("TeleportRight", throwIfNotFound: true);
            m_Move_SpaceDragLeft = m_Move.FindAction("SpaceDragLeft", throwIfNotFound: true);
            m_Move_SpaceDragRight = m_Move.FindAction("SpaceDragRight", throwIfNotFound: true);
            m_Move_Jump = m_Move.FindAction("Jump", throwIfNotFound: true);
            m_Move_Run = m_Move.FindAction("Run", throwIfNotFound: true);
            // Turn
            m_Turn = asset.FindActionMap("Turn", throwIfNotFound: true);
            m_Turn_Continuous = m_Turn.FindAction("Continuous", throwIfNotFound: true);
            m_Turn_Snap = m_Turn.FindAction("Snap", throwIfNotFound: true);
            m_Turn_SpaceTurnLeft = m_Turn.FindAction("SpaceTurnLeft", throwIfNotFound: true);
            m_Turn_SpaceTurnRight = m_Turn.FindAction("SpaceTurnRight", throwIfNotFound: true);
            // Grab
            m_Grab = asset.FindActionMap("Grab", throwIfNotFound: true);
            m_Grab_LeftHand = m_Grab.FindAction("LeftHand", throwIfNotFound: true);
            m_Grab_RightHand = m_Grab.FindAction("RightHand", throwIfNotFound: true);
            // Head
            m_Head = asset.FindActionMap("Head", throwIfNotFound: true);
            m_Head_Position = m_Head.FindAction("Position", throwIfNotFound: true);
            m_Head_Rotation = m_Head.FindAction("Rotation", throwIfNotFound: true);
            m_Head_IsTracked = m_Head.FindAction("Is Tracked", throwIfNotFound: true);
            m_Head_TrackingState = m_Head.FindAction("Tracking State", throwIfNotFound: true);
            m_Head_EyeGazePosition = m_Head.FindAction("Eye Gaze Position", throwIfNotFound: true);
            m_Head_EyeGazeRotation = m_Head.FindAction("Eye Gaze Rotation", throwIfNotFound: true);
            m_Head_EyeGazeIsTracked = m_Head.FindAction("Eye Gaze Is Tracked", throwIfNotFound: true);
            m_Head_EyeGazeTrackingState = m_Head.FindAction("Eye Gaze Tracking State", throwIfNotFound: true);
            // LeftHand
            m_LeftHand = asset.FindActionMap("LeftHand", throwIfNotFound: true);
            m_LeftHand_Position = m_LeftHand.FindAction("Position", throwIfNotFound: true);
            m_LeftHand_Rotation = m_LeftHand.FindAction("Rotation", throwIfNotFound: true);
            m_LeftHand_IsTracked = m_LeftHand.FindAction("Is Tracked", throwIfNotFound: true);
            m_LeftHand_TrackingState = m_LeftHand.FindAction("Tracking State", throwIfNotFound: true);
            m_LeftHand_HapticDevice = m_LeftHand.FindAction("Haptic Device", throwIfNotFound: true);
            m_LeftHand_AimPosition = m_LeftHand.FindAction("Aim Position", throwIfNotFound: true);
            m_LeftHand_AimRotation = m_LeftHand.FindAction("Aim Rotation", throwIfNotFound: true);
            m_LeftHand_AimFlags = m_LeftHand.FindAction("Aim Flags", throwIfNotFound: true);
            m_LeftHand_PinchPosition = m_LeftHand.FindAction("Pinch Position", throwIfNotFound: true);
            m_LeftHand_PokePosition = m_LeftHand.FindAction("Poke Position", throwIfNotFound: true);
            m_LeftHand_PokeRotation = m_LeftHand.FindAction("Poke Rotation", throwIfNotFound: true);
            // RightHand
            m_RightHand = asset.FindActionMap("RightHand", throwIfNotFound: true);
            m_RightHand_Position = m_RightHand.FindAction("Position", throwIfNotFound: true);
            m_RightHand_Rotation = m_RightHand.FindAction("Rotation", throwIfNotFound: true);
            m_RightHand_IsTracked = m_RightHand.FindAction("Is Tracked", throwIfNotFound: true);
            m_RightHand_TrackingState = m_RightHand.FindAction("Tracking State", throwIfNotFound: true);
            m_RightHand_HapticDevice = m_RightHand.FindAction("Haptic Device", throwIfNotFound: true);
            m_RightHand_AimPosition = m_RightHand.FindAction("Aim Position", throwIfNotFound: true);
            m_RightHand_AimRotation = m_RightHand.FindAction("Aim Rotation", throwIfNotFound: true);
            m_RightHand_AimFlags = m_RightHand.FindAction("Aim Flags", throwIfNotFound: true);
            m_RightHand_PinchPosition = m_RightHand.FindAction("Pinch Position", throwIfNotFound: true);
            m_RightHand_PokePosition = m_RightHand.FindAction("Poke Position", throwIfNotFound: true);
            m_RightHand_PokeRotation = m_RightHand.FindAction("Poke Rotation", throwIfNotFound: true);
            // Hip
            m_Hip = asset.FindActionMap("Hip", throwIfNotFound: true);
            m_Hip_Position = m_Hip.FindAction("Position", throwIfNotFound: true);
            m_Hip_Rotation = m_Hip.FindAction("Rotation", throwIfNotFound: true);
            m_Hip_IsTracked = m_Hip.FindAction("Is Tracked", throwIfNotFound: true);
            m_Hip_TrackingState = m_Hip.FindAction("Tracking State", throwIfNotFound: true);
            // LeftFoot
            m_LeftFoot = asset.FindActionMap("LeftFoot", throwIfNotFound: true);
            m_LeftFoot_Position = m_LeftFoot.FindAction("Position", throwIfNotFound: true);
            m_LeftFoot_Rotation = m_LeftFoot.FindAction("Rotation", throwIfNotFound: true);
            m_LeftFoot_IsTracked = m_LeftFoot.FindAction("Is Tracked", throwIfNotFound: true);
            m_LeftFoot_TrackingState = m_LeftFoot.FindAction("Tracking State", throwIfNotFound: true);
            // RightFoot
            m_RightFoot = asset.FindActionMap("RightFoot", throwIfNotFound: true);
            m_RightFoot_Position = m_RightFoot.FindAction("Position", throwIfNotFound: true);
            m_RightFoot_Rotation = m_RightFoot.FindAction("Rotation", throwIfNotFound: true);
            m_RightFoot_IsTracked = m_RightFoot.FindAction("Is Tracked", throwIfNotFound: true);
            m_RightFoot_TrackingState = m_RightFoot.FindAction("Tracking State", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Move
        private readonly InputActionMap m_Move;
        private List<IMoveActions> m_MoveActionsCallbackInterfaces = new List<IMoveActions>();
        private readonly InputAction m_Move_Continuous;
        private readonly InputAction m_Move_Projection;
        private readonly InputAction m_Move_TeleportLeft;
        private readonly InputAction m_Move_TeleportRight;
        private readonly InputAction m_Move_SpaceDragLeft;
        private readonly InputAction m_Move_SpaceDragRight;
        private readonly InputAction m_Move_Jump;
        private readonly InputAction m_Move_Run;
        public struct MoveActions
        {
            private @MellowControls m_Wrapper;
            public MoveActions(@MellowControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Continuous => m_Wrapper.m_Move_Continuous;
            public InputAction @Projection => m_Wrapper.m_Move_Projection;
            public InputAction @TeleportLeft => m_Wrapper.m_Move_TeleportLeft;
            public InputAction @TeleportRight => m_Wrapper.m_Move_TeleportRight;
            public InputAction @SpaceDragLeft => m_Wrapper.m_Move_SpaceDragLeft;
            public InputAction @SpaceDragRight => m_Wrapper.m_Move_SpaceDragRight;
            public InputAction @Jump => m_Wrapper.m_Move_Jump;
            public InputAction @Run => m_Wrapper.m_Move_Run;
            public InputActionMap Get() { return m_Wrapper.m_Move; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
            public void AddCallbacks(IMoveActions instance)
            {
                if (instance == null || m_Wrapper.m_MoveActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MoveActionsCallbackInterfaces.Add(instance);
                @Continuous.started += instance.OnContinuous;
                @Continuous.performed += instance.OnContinuous;
                @Continuous.canceled += instance.OnContinuous;
                @Projection.started += instance.OnProjection;
                @Projection.performed += instance.OnProjection;
                @Projection.canceled += instance.OnProjection;
                @TeleportLeft.started += instance.OnTeleportLeft;
                @TeleportLeft.performed += instance.OnTeleportLeft;
                @TeleportLeft.canceled += instance.OnTeleportLeft;
                @TeleportRight.started += instance.OnTeleportRight;
                @TeleportRight.performed += instance.OnTeleportRight;
                @TeleportRight.canceled += instance.OnTeleportRight;
                @SpaceDragLeft.started += instance.OnSpaceDragLeft;
                @SpaceDragLeft.performed += instance.OnSpaceDragLeft;
                @SpaceDragLeft.canceled += instance.OnSpaceDragLeft;
                @SpaceDragRight.started += instance.OnSpaceDragRight;
                @SpaceDragRight.performed += instance.OnSpaceDragRight;
                @SpaceDragRight.canceled += instance.OnSpaceDragRight;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
            }

            private void UnregisterCallbacks(IMoveActions instance)
            {
                @Continuous.started -= instance.OnContinuous;
                @Continuous.performed -= instance.OnContinuous;
                @Continuous.canceled -= instance.OnContinuous;
                @Projection.started -= instance.OnProjection;
                @Projection.performed -= instance.OnProjection;
                @Projection.canceled -= instance.OnProjection;
                @TeleportLeft.started -= instance.OnTeleportLeft;
                @TeleportLeft.performed -= instance.OnTeleportLeft;
                @TeleportLeft.canceled -= instance.OnTeleportLeft;
                @TeleportRight.started -= instance.OnTeleportRight;
                @TeleportRight.performed -= instance.OnTeleportRight;
                @TeleportRight.canceled -= instance.OnTeleportRight;
                @SpaceDragLeft.started -= instance.OnSpaceDragLeft;
                @SpaceDragLeft.performed -= instance.OnSpaceDragLeft;
                @SpaceDragLeft.canceled -= instance.OnSpaceDragLeft;
                @SpaceDragRight.started -= instance.OnSpaceDragRight;
                @SpaceDragRight.performed -= instance.OnSpaceDragRight;
                @SpaceDragRight.canceled -= instance.OnSpaceDragRight;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Run.started -= instance.OnRun;
                @Run.performed -= instance.OnRun;
                @Run.canceled -= instance.OnRun;
            }

            public void RemoveCallbacks(IMoveActions instance)
            {
                if (m_Wrapper.m_MoveActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMoveActions instance)
            {
                foreach (var item in m_Wrapper.m_MoveActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MoveActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MoveActions @Move => new MoveActions(this);

        // Turn
        private readonly InputActionMap m_Turn;
        private List<ITurnActions> m_TurnActionsCallbackInterfaces = new List<ITurnActions>();
        private readonly InputAction m_Turn_Continuous;
        private readonly InputAction m_Turn_Snap;
        private readonly InputAction m_Turn_SpaceTurnLeft;
        private readonly InputAction m_Turn_SpaceTurnRight;
        public struct TurnActions
        {
            private @MellowControls m_Wrapper;
            public TurnActions(@MellowControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Continuous => m_Wrapper.m_Turn_Continuous;
            public InputAction @Snap => m_Wrapper.m_Turn_Snap;
            public InputAction @SpaceTurnLeft => m_Wrapper.m_Turn_SpaceTurnLeft;
            public InputAction @SpaceTurnRight => m_Wrapper.m_Turn_SpaceTurnRight;
            public InputActionMap Get() { return m_Wrapper.m_Turn; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TurnActions set) { return set.Get(); }
            public void AddCallbacks(ITurnActions instance)
            {
                if (instance == null || m_Wrapper.m_TurnActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TurnActionsCallbackInterfaces.Add(instance);
                @Continuous.started += instance.OnContinuous;
                @Continuous.performed += instance.OnContinuous;
                @Continuous.canceled += instance.OnContinuous;
                @Snap.started += instance.OnSnap;
                @Snap.performed += instance.OnSnap;
                @Snap.canceled += instance.OnSnap;
                @SpaceTurnLeft.started += instance.OnSpaceTurnLeft;
                @SpaceTurnLeft.performed += instance.OnSpaceTurnLeft;
                @SpaceTurnLeft.canceled += instance.OnSpaceTurnLeft;
                @SpaceTurnRight.started += instance.OnSpaceTurnRight;
                @SpaceTurnRight.performed += instance.OnSpaceTurnRight;
                @SpaceTurnRight.canceled += instance.OnSpaceTurnRight;
            }

            private void UnregisterCallbacks(ITurnActions instance)
            {
                @Continuous.started -= instance.OnContinuous;
                @Continuous.performed -= instance.OnContinuous;
                @Continuous.canceled -= instance.OnContinuous;
                @Snap.started -= instance.OnSnap;
                @Snap.performed -= instance.OnSnap;
                @Snap.canceled -= instance.OnSnap;
                @SpaceTurnLeft.started -= instance.OnSpaceTurnLeft;
                @SpaceTurnLeft.performed -= instance.OnSpaceTurnLeft;
                @SpaceTurnLeft.canceled -= instance.OnSpaceTurnLeft;
                @SpaceTurnRight.started -= instance.OnSpaceTurnRight;
                @SpaceTurnRight.performed -= instance.OnSpaceTurnRight;
                @SpaceTurnRight.canceled -= instance.OnSpaceTurnRight;
            }

            public void RemoveCallbacks(ITurnActions instance)
            {
                if (m_Wrapper.m_TurnActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITurnActions instance)
            {
                foreach (var item in m_Wrapper.m_TurnActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TurnActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TurnActions @Turn => new TurnActions(this);

        // Grab
        private readonly InputActionMap m_Grab;
        private List<IGrabActions> m_GrabActionsCallbackInterfaces = new List<IGrabActions>();
        private readonly InputAction m_Grab_LeftHand;
        private readonly InputAction m_Grab_RightHand;
        public struct GrabActions
        {
            private @MellowControls m_Wrapper;
            public GrabActions(@MellowControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @LeftHand => m_Wrapper.m_Grab_LeftHand;
            public InputAction @RightHand => m_Wrapper.m_Grab_RightHand;
            public InputActionMap Get() { return m_Wrapper.m_Grab; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GrabActions set) { return set.Get(); }
            public void AddCallbacks(IGrabActions instance)
            {
                if (instance == null || m_Wrapper.m_GrabActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GrabActionsCallbackInterfaces.Add(instance);
                @LeftHand.started += instance.OnLeftHand;
                @LeftHand.performed += instance.OnLeftHand;
                @LeftHand.canceled += instance.OnLeftHand;
                @RightHand.started += instance.OnRightHand;
                @RightHand.performed += instance.OnRightHand;
                @RightHand.canceled += instance.OnRightHand;
            }

            private void UnregisterCallbacks(IGrabActions instance)
            {
                @LeftHand.started -= instance.OnLeftHand;
                @LeftHand.performed -= instance.OnLeftHand;
                @LeftHand.canceled -= instance.OnLeftHand;
                @RightHand.started -= instance.OnRightHand;
                @RightHand.performed -= instance.OnRightHand;
                @RightHand.canceled -= instance.OnRightHand;
            }

            public void RemoveCallbacks(IGrabActions instance)
            {
                if (m_Wrapper.m_GrabActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGrabActions instance)
            {
                foreach (var item in m_Wrapper.m_GrabActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GrabActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GrabActions @Grab => new GrabActions(this);

        // Head
        private readonly InputActionMap m_Head;
        private List<IHeadActions> m_HeadActionsCallbackInterfaces = new List<IHeadActions>();
        private readonly InputAction m_Head_Position;
        private readonly InputAction m_Head_Rotation;
        private readonly InputAction m_Head_IsTracked;
        private readonly InputAction m_Head_TrackingState;
        private readonly InputAction m_Head_EyeGazePosition;
        private readonly InputAction m_Head_EyeGazeRotation;
        private readonly InputAction m_Head_EyeGazeIsTracked;
        private readonly InputAction m_Head_EyeGazeTrackingState;
        public struct HeadActions
        {
            private @MellowControls m_Wrapper;
            public HeadActions(@MellowControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_Head_Position;
            public InputAction @Rotation => m_Wrapper.m_Head_Rotation;
            public InputAction @IsTracked => m_Wrapper.m_Head_IsTracked;
            public InputAction @TrackingState => m_Wrapper.m_Head_TrackingState;
            public InputAction @EyeGazePosition => m_Wrapper.m_Head_EyeGazePosition;
            public InputAction @EyeGazeRotation => m_Wrapper.m_Head_EyeGazeRotation;
            public InputAction @EyeGazeIsTracked => m_Wrapper.m_Head_EyeGazeIsTracked;
            public InputAction @EyeGazeTrackingState => m_Wrapper.m_Head_EyeGazeTrackingState;
            public InputActionMap Get() { return m_Wrapper.m_Head; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(HeadActions set) { return set.Get(); }
            public void AddCallbacks(IHeadActions instance)
            {
                if (instance == null || m_Wrapper.m_HeadActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_HeadActionsCallbackInterfaces.Add(instance);
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @IsTracked.started += instance.OnIsTracked;
                @IsTracked.performed += instance.OnIsTracked;
                @IsTracked.canceled += instance.OnIsTracked;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
                @EyeGazePosition.started += instance.OnEyeGazePosition;
                @EyeGazePosition.performed += instance.OnEyeGazePosition;
                @EyeGazePosition.canceled += instance.OnEyeGazePosition;
                @EyeGazeRotation.started += instance.OnEyeGazeRotation;
                @EyeGazeRotation.performed += instance.OnEyeGazeRotation;
                @EyeGazeRotation.canceled += instance.OnEyeGazeRotation;
                @EyeGazeIsTracked.started += instance.OnEyeGazeIsTracked;
                @EyeGazeIsTracked.performed += instance.OnEyeGazeIsTracked;
                @EyeGazeIsTracked.canceled += instance.OnEyeGazeIsTracked;
                @EyeGazeTrackingState.started += instance.OnEyeGazeTrackingState;
                @EyeGazeTrackingState.performed += instance.OnEyeGazeTrackingState;
                @EyeGazeTrackingState.canceled += instance.OnEyeGazeTrackingState;
            }

            private void UnregisterCallbacks(IHeadActions instance)
            {
                @Position.started -= instance.OnPosition;
                @Position.performed -= instance.OnPosition;
                @Position.canceled -= instance.OnPosition;
                @Rotation.started -= instance.OnRotation;
                @Rotation.performed -= instance.OnRotation;
                @Rotation.canceled -= instance.OnRotation;
                @IsTracked.started -= instance.OnIsTracked;
                @IsTracked.performed -= instance.OnIsTracked;
                @IsTracked.canceled -= instance.OnIsTracked;
                @TrackingState.started -= instance.OnTrackingState;
                @TrackingState.performed -= instance.OnTrackingState;
                @TrackingState.canceled -= instance.OnTrackingState;
                @EyeGazePosition.started -= instance.OnEyeGazePosition;
                @EyeGazePosition.performed -= instance.OnEyeGazePosition;
                @EyeGazePosition.canceled -= instance.OnEyeGazePosition;
                @EyeGazeRotation.started -= instance.OnEyeGazeRotation;
                @EyeGazeRotation.performed -= instance.OnEyeGazeRotation;
                @EyeGazeRotation.canceled -= instance.OnEyeGazeRotation;
                @EyeGazeIsTracked.started -= instance.OnEyeGazeIsTracked;
                @EyeGazeIsTracked.performed -= instance.OnEyeGazeIsTracked;
                @EyeGazeIsTracked.canceled -= instance.OnEyeGazeIsTracked;
                @EyeGazeTrackingState.started -= instance.OnEyeGazeTrackingState;
                @EyeGazeTrackingState.performed -= instance.OnEyeGazeTrackingState;
                @EyeGazeTrackingState.canceled -= instance.OnEyeGazeTrackingState;
            }

            public void RemoveCallbacks(IHeadActions instance)
            {
                if (m_Wrapper.m_HeadActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IHeadActions instance)
            {
                foreach (var item in m_Wrapper.m_HeadActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_HeadActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public HeadActions @Head => new HeadActions(this);

        // LeftHand
        private readonly InputActionMap m_LeftHand;
        private List<ILeftHandActions> m_LeftHandActionsCallbackInterfaces = new List<ILeftHandActions>();
        private readonly InputAction m_LeftHand_Position;
        private readonly InputAction m_LeftHand_Rotation;
        private readonly InputAction m_LeftHand_IsTracked;
        private readonly InputAction m_LeftHand_TrackingState;
        private readonly InputAction m_LeftHand_HapticDevice;
        private readonly InputAction m_LeftHand_AimPosition;
        private readonly InputAction m_LeftHand_AimRotation;
        private readonly InputAction m_LeftHand_AimFlags;
        private readonly InputAction m_LeftHand_PinchPosition;
        private readonly InputAction m_LeftHand_PokePosition;
        private readonly InputAction m_LeftHand_PokeRotation;
        public struct LeftHandActions
        {
            private @MellowControls m_Wrapper;
            public LeftHandActions(@MellowControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_LeftHand_Position;
            public InputAction @Rotation => m_Wrapper.m_LeftHand_Rotation;
            public InputAction @IsTracked => m_Wrapper.m_LeftHand_IsTracked;
            public InputAction @TrackingState => m_Wrapper.m_LeftHand_TrackingState;
            public InputAction @HapticDevice => m_Wrapper.m_LeftHand_HapticDevice;
            public InputAction @AimPosition => m_Wrapper.m_LeftHand_AimPosition;
            public InputAction @AimRotation => m_Wrapper.m_LeftHand_AimRotation;
            public InputAction @AimFlags => m_Wrapper.m_LeftHand_AimFlags;
            public InputAction @PinchPosition => m_Wrapper.m_LeftHand_PinchPosition;
            public InputAction @PokePosition => m_Wrapper.m_LeftHand_PokePosition;
            public InputAction @PokeRotation => m_Wrapper.m_LeftHand_PokeRotation;
            public InputActionMap Get() { return m_Wrapper.m_LeftHand; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LeftHandActions set) { return set.Get(); }
            public void AddCallbacks(ILeftHandActions instance)
            {
                if (instance == null || m_Wrapper.m_LeftHandActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_LeftHandActionsCallbackInterfaces.Add(instance);
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @IsTracked.started += instance.OnIsTracked;
                @IsTracked.performed += instance.OnIsTracked;
                @IsTracked.canceled += instance.OnIsTracked;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
                @HapticDevice.started += instance.OnHapticDevice;
                @HapticDevice.performed += instance.OnHapticDevice;
                @HapticDevice.canceled += instance.OnHapticDevice;
                @AimPosition.started += instance.OnAimPosition;
                @AimPosition.performed += instance.OnAimPosition;
                @AimPosition.canceled += instance.OnAimPosition;
                @AimRotation.started += instance.OnAimRotation;
                @AimRotation.performed += instance.OnAimRotation;
                @AimRotation.canceled += instance.OnAimRotation;
                @AimFlags.started += instance.OnAimFlags;
                @AimFlags.performed += instance.OnAimFlags;
                @AimFlags.canceled += instance.OnAimFlags;
                @PinchPosition.started += instance.OnPinchPosition;
                @PinchPosition.performed += instance.OnPinchPosition;
                @PinchPosition.canceled += instance.OnPinchPosition;
                @PokePosition.started += instance.OnPokePosition;
                @PokePosition.performed += instance.OnPokePosition;
                @PokePosition.canceled += instance.OnPokePosition;
                @PokeRotation.started += instance.OnPokeRotation;
                @PokeRotation.performed += instance.OnPokeRotation;
                @PokeRotation.canceled += instance.OnPokeRotation;
            }

            private void UnregisterCallbacks(ILeftHandActions instance)
            {
                @Position.started -= instance.OnPosition;
                @Position.performed -= instance.OnPosition;
                @Position.canceled -= instance.OnPosition;
                @Rotation.started -= instance.OnRotation;
                @Rotation.performed -= instance.OnRotation;
                @Rotation.canceled -= instance.OnRotation;
                @IsTracked.started -= instance.OnIsTracked;
                @IsTracked.performed -= instance.OnIsTracked;
                @IsTracked.canceled -= instance.OnIsTracked;
                @TrackingState.started -= instance.OnTrackingState;
                @TrackingState.performed -= instance.OnTrackingState;
                @TrackingState.canceled -= instance.OnTrackingState;
                @HapticDevice.started -= instance.OnHapticDevice;
                @HapticDevice.performed -= instance.OnHapticDevice;
                @HapticDevice.canceled -= instance.OnHapticDevice;
                @AimPosition.started -= instance.OnAimPosition;
                @AimPosition.performed -= instance.OnAimPosition;
                @AimPosition.canceled -= instance.OnAimPosition;
                @AimRotation.started -= instance.OnAimRotation;
                @AimRotation.performed -= instance.OnAimRotation;
                @AimRotation.canceled -= instance.OnAimRotation;
                @AimFlags.started -= instance.OnAimFlags;
                @AimFlags.performed -= instance.OnAimFlags;
                @AimFlags.canceled -= instance.OnAimFlags;
                @PinchPosition.started -= instance.OnPinchPosition;
                @PinchPosition.performed -= instance.OnPinchPosition;
                @PinchPosition.canceled -= instance.OnPinchPosition;
                @PokePosition.started -= instance.OnPokePosition;
                @PokePosition.performed -= instance.OnPokePosition;
                @PokePosition.canceled -= instance.OnPokePosition;
                @PokeRotation.started -= instance.OnPokeRotation;
                @PokeRotation.performed -= instance.OnPokeRotation;
                @PokeRotation.canceled -= instance.OnPokeRotation;
            }

            public void RemoveCallbacks(ILeftHandActions instance)
            {
                if (m_Wrapper.m_LeftHandActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ILeftHandActions instance)
            {
                foreach (var item in m_Wrapper.m_LeftHandActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_LeftHandActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public LeftHandActions @LeftHand => new LeftHandActions(this);

        // RightHand
        private readonly InputActionMap m_RightHand;
        private List<IRightHandActions> m_RightHandActionsCallbackInterfaces = new List<IRightHandActions>();
        private readonly InputAction m_RightHand_Position;
        private readonly InputAction m_RightHand_Rotation;
        private readonly InputAction m_RightHand_IsTracked;
        private readonly InputAction m_RightHand_TrackingState;
        private readonly InputAction m_RightHand_HapticDevice;
        private readonly InputAction m_RightHand_AimPosition;
        private readonly InputAction m_RightHand_AimRotation;
        private readonly InputAction m_RightHand_AimFlags;
        private readonly InputAction m_RightHand_PinchPosition;
        private readonly InputAction m_RightHand_PokePosition;
        private readonly InputAction m_RightHand_PokeRotation;
        public struct RightHandActions
        {
            private @MellowControls m_Wrapper;
            public RightHandActions(@MellowControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_RightHand_Position;
            public InputAction @Rotation => m_Wrapper.m_RightHand_Rotation;
            public InputAction @IsTracked => m_Wrapper.m_RightHand_IsTracked;
            public InputAction @TrackingState => m_Wrapper.m_RightHand_TrackingState;
            public InputAction @HapticDevice => m_Wrapper.m_RightHand_HapticDevice;
            public InputAction @AimPosition => m_Wrapper.m_RightHand_AimPosition;
            public InputAction @AimRotation => m_Wrapper.m_RightHand_AimRotation;
            public InputAction @AimFlags => m_Wrapper.m_RightHand_AimFlags;
            public InputAction @PinchPosition => m_Wrapper.m_RightHand_PinchPosition;
            public InputAction @PokePosition => m_Wrapper.m_RightHand_PokePosition;
            public InputAction @PokeRotation => m_Wrapper.m_RightHand_PokeRotation;
            public InputActionMap Get() { return m_Wrapper.m_RightHand; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(RightHandActions set) { return set.Get(); }
            public void AddCallbacks(IRightHandActions instance)
            {
                if (instance == null || m_Wrapper.m_RightHandActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_RightHandActionsCallbackInterfaces.Add(instance);
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @IsTracked.started += instance.OnIsTracked;
                @IsTracked.performed += instance.OnIsTracked;
                @IsTracked.canceled += instance.OnIsTracked;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
                @HapticDevice.started += instance.OnHapticDevice;
                @HapticDevice.performed += instance.OnHapticDevice;
                @HapticDevice.canceled += instance.OnHapticDevice;
                @AimPosition.started += instance.OnAimPosition;
                @AimPosition.performed += instance.OnAimPosition;
                @AimPosition.canceled += instance.OnAimPosition;
                @AimRotation.started += instance.OnAimRotation;
                @AimRotation.performed += instance.OnAimRotation;
                @AimRotation.canceled += instance.OnAimRotation;
                @AimFlags.started += instance.OnAimFlags;
                @AimFlags.performed += instance.OnAimFlags;
                @AimFlags.canceled += instance.OnAimFlags;
                @PinchPosition.started += instance.OnPinchPosition;
                @PinchPosition.performed += instance.OnPinchPosition;
                @PinchPosition.canceled += instance.OnPinchPosition;
                @PokePosition.started += instance.OnPokePosition;
                @PokePosition.performed += instance.OnPokePosition;
                @PokePosition.canceled += instance.OnPokePosition;
                @PokeRotation.started += instance.OnPokeRotation;
                @PokeRotation.performed += instance.OnPokeRotation;
                @PokeRotation.canceled += instance.OnPokeRotation;
            }

            private void UnregisterCallbacks(IRightHandActions instance)
            {
                @Position.started -= instance.OnPosition;
                @Position.performed -= instance.OnPosition;
                @Position.canceled -= instance.OnPosition;
                @Rotation.started -= instance.OnRotation;
                @Rotation.performed -= instance.OnRotation;
                @Rotation.canceled -= instance.OnRotation;
                @IsTracked.started -= instance.OnIsTracked;
                @IsTracked.performed -= instance.OnIsTracked;
                @IsTracked.canceled -= instance.OnIsTracked;
                @TrackingState.started -= instance.OnTrackingState;
                @TrackingState.performed -= instance.OnTrackingState;
                @TrackingState.canceled -= instance.OnTrackingState;
                @HapticDevice.started -= instance.OnHapticDevice;
                @HapticDevice.performed -= instance.OnHapticDevice;
                @HapticDevice.canceled -= instance.OnHapticDevice;
                @AimPosition.started -= instance.OnAimPosition;
                @AimPosition.performed -= instance.OnAimPosition;
                @AimPosition.canceled -= instance.OnAimPosition;
                @AimRotation.started -= instance.OnAimRotation;
                @AimRotation.performed -= instance.OnAimRotation;
                @AimRotation.canceled -= instance.OnAimRotation;
                @AimFlags.started -= instance.OnAimFlags;
                @AimFlags.performed -= instance.OnAimFlags;
                @AimFlags.canceled -= instance.OnAimFlags;
                @PinchPosition.started -= instance.OnPinchPosition;
                @PinchPosition.performed -= instance.OnPinchPosition;
                @PinchPosition.canceled -= instance.OnPinchPosition;
                @PokePosition.started -= instance.OnPokePosition;
                @PokePosition.performed -= instance.OnPokePosition;
                @PokePosition.canceled -= instance.OnPokePosition;
                @PokeRotation.started -= instance.OnPokeRotation;
                @PokeRotation.performed -= instance.OnPokeRotation;
                @PokeRotation.canceled -= instance.OnPokeRotation;
            }

            public void RemoveCallbacks(IRightHandActions instance)
            {
                if (m_Wrapper.m_RightHandActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IRightHandActions instance)
            {
                foreach (var item in m_Wrapper.m_RightHandActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_RightHandActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public RightHandActions @RightHand => new RightHandActions(this);

        // Hip
        private readonly InputActionMap m_Hip;
        private List<IHipActions> m_HipActionsCallbackInterfaces = new List<IHipActions>();
        private readonly InputAction m_Hip_Position;
        private readonly InputAction m_Hip_Rotation;
        private readonly InputAction m_Hip_IsTracked;
        private readonly InputAction m_Hip_TrackingState;
        public struct HipActions
        {
            private @MellowControls m_Wrapper;
            public HipActions(@MellowControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_Hip_Position;
            public InputAction @Rotation => m_Wrapper.m_Hip_Rotation;
            public InputAction @IsTracked => m_Wrapper.m_Hip_IsTracked;
            public InputAction @TrackingState => m_Wrapper.m_Hip_TrackingState;
            public InputActionMap Get() { return m_Wrapper.m_Hip; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(HipActions set) { return set.Get(); }
            public void AddCallbacks(IHipActions instance)
            {
                if (instance == null || m_Wrapper.m_HipActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_HipActionsCallbackInterfaces.Add(instance);
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @IsTracked.started += instance.OnIsTracked;
                @IsTracked.performed += instance.OnIsTracked;
                @IsTracked.canceled += instance.OnIsTracked;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
            }

            private void UnregisterCallbacks(IHipActions instance)
            {
                @Position.started -= instance.OnPosition;
                @Position.performed -= instance.OnPosition;
                @Position.canceled -= instance.OnPosition;
                @Rotation.started -= instance.OnRotation;
                @Rotation.performed -= instance.OnRotation;
                @Rotation.canceled -= instance.OnRotation;
                @IsTracked.started -= instance.OnIsTracked;
                @IsTracked.performed -= instance.OnIsTracked;
                @IsTracked.canceled -= instance.OnIsTracked;
                @TrackingState.started -= instance.OnTrackingState;
                @TrackingState.performed -= instance.OnTrackingState;
                @TrackingState.canceled -= instance.OnTrackingState;
            }

            public void RemoveCallbacks(IHipActions instance)
            {
                if (m_Wrapper.m_HipActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IHipActions instance)
            {
                foreach (var item in m_Wrapper.m_HipActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_HipActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public HipActions @Hip => new HipActions(this);

        // LeftFoot
        private readonly InputActionMap m_LeftFoot;
        private List<ILeftFootActions> m_LeftFootActionsCallbackInterfaces = new List<ILeftFootActions>();
        private readonly InputAction m_LeftFoot_Position;
        private readonly InputAction m_LeftFoot_Rotation;
        private readonly InputAction m_LeftFoot_IsTracked;
        private readonly InputAction m_LeftFoot_TrackingState;
        public struct LeftFootActions
        {
            private @MellowControls m_Wrapper;
            public LeftFootActions(@MellowControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_LeftFoot_Position;
            public InputAction @Rotation => m_Wrapper.m_LeftFoot_Rotation;
            public InputAction @IsTracked => m_Wrapper.m_LeftFoot_IsTracked;
            public InputAction @TrackingState => m_Wrapper.m_LeftFoot_TrackingState;
            public InputActionMap Get() { return m_Wrapper.m_LeftFoot; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LeftFootActions set) { return set.Get(); }
            public void AddCallbacks(ILeftFootActions instance)
            {
                if (instance == null || m_Wrapper.m_LeftFootActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_LeftFootActionsCallbackInterfaces.Add(instance);
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @IsTracked.started += instance.OnIsTracked;
                @IsTracked.performed += instance.OnIsTracked;
                @IsTracked.canceled += instance.OnIsTracked;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
            }

            private void UnregisterCallbacks(ILeftFootActions instance)
            {
                @Position.started -= instance.OnPosition;
                @Position.performed -= instance.OnPosition;
                @Position.canceled -= instance.OnPosition;
                @Rotation.started -= instance.OnRotation;
                @Rotation.performed -= instance.OnRotation;
                @Rotation.canceled -= instance.OnRotation;
                @IsTracked.started -= instance.OnIsTracked;
                @IsTracked.performed -= instance.OnIsTracked;
                @IsTracked.canceled -= instance.OnIsTracked;
                @TrackingState.started -= instance.OnTrackingState;
                @TrackingState.performed -= instance.OnTrackingState;
                @TrackingState.canceled -= instance.OnTrackingState;
            }

            public void RemoveCallbacks(ILeftFootActions instance)
            {
                if (m_Wrapper.m_LeftFootActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ILeftFootActions instance)
            {
                foreach (var item in m_Wrapper.m_LeftFootActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_LeftFootActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public LeftFootActions @LeftFoot => new LeftFootActions(this);

        // RightFoot
        private readonly InputActionMap m_RightFoot;
        private List<IRightFootActions> m_RightFootActionsCallbackInterfaces = new List<IRightFootActions>();
        private readonly InputAction m_RightFoot_Position;
        private readonly InputAction m_RightFoot_Rotation;
        private readonly InputAction m_RightFoot_IsTracked;
        private readonly InputAction m_RightFoot_TrackingState;
        public struct RightFootActions
        {
            private @MellowControls m_Wrapper;
            public RightFootActions(@MellowControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_RightFoot_Position;
            public InputAction @Rotation => m_Wrapper.m_RightFoot_Rotation;
            public InputAction @IsTracked => m_Wrapper.m_RightFoot_IsTracked;
            public InputAction @TrackingState => m_Wrapper.m_RightFoot_TrackingState;
            public InputActionMap Get() { return m_Wrapper.m_RightFoot; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(RightFootActions set) { return set.Get(); }
            public void AddCallbacks(IRightFootActions instance)
            {
                if (instance == null || m_Wrapper.m_RightFootActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_RightFootActionsCallbackInterfaces.Add(instance);
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @IsTracked.started += instance.OnIsTracked;
                @IsTracked.performed += instance.OnIsTracked;
                @IsTracked.canceled += instance.OnIsTracked;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
            }

            private void UnregisterCallbacks(IRightFootActions instance)
            {
                @Position.started -= instance.OnPosition;
                @Position.performed -= instance.OnPosition;
                @Position.canceled -= instance.OnPosition;
                @Rotation.started -= instance.OnRotation;
                @Rotation.performed -= instance.OnRotation;
                @Rotation.canceled -= instance.OnRotation;
                @IsTracked.started -= instance.OnIsTracked;
                @IsTracked.performed -= instance.OnIsTracked;
                @IsTracked.canceled -= instance.OnIsTracked;
                @TrackingState.started -= instance.OnTrackingState;
                @TrackingState.performed -= instance.OnTrackingState;
                @TrackingState.canceled -= instance.OnTrackingState;
            }

            public void RemoveCallbacks(IRightFootActions instance)
            {
                if (m_Wrapper.m_RightFootActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IRightFootActions instance)
            {
                foreach (var item in m_Wrapper.m_RightFootActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_RightFootActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public RightFootActions @RightFoot => new RightFootActions(this);
        public interface IMoveActions
        {
            void OnContinuous(InputAction.CallbackContext context);
            void OnProjection(InputAction.CallbackContext context);
            void OnTeleportLeft(InputAction.CallbackContext context);
            void OnTeleportRight(InputAction.CallbackContext context);
            void OnSpaceDragLeft(InputAction.CallbackContext context);
            void OnSpaceDragRight(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnRun(InputAction.CallbackContext context);
        }
        public interface ITurnActions
        {
            void OnContinuous(InputAction.CallbackContext context);
            void OnSnap(InputAction.CallbackContext context);
            void OnSpaceTurnLeft(InputAction.CallbackContext context);
            void OnSpaceTurnRight(InputAction.CallbackContext context);
        }
        public interface IGrabActions
        {
            void OnLeftHand(InputAction.CallbackContext context);
            void OnRightHand(InputAction.CallbackContext context);
        }
        public interface IHeadActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnIsTracked(InputAction.CallbackContext context);
            void OnTrackingState(InputAction.CallbackContext context);
            void OnEyeGazePosition(InputAction.CallbackContext context);
            void OnEyeGazeRotation(InputAction.CallbackContext context);
            void OnEyeGazeIsTracked(InputAction.CallbackContext context);
            void OnEyeGazeTrackingState(InputAction.CallbackContext context);
        }
        public interface ILeftHandActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnIsTracked(InputAction.CallbackContext context);
            void OnTrackingState(InputAction.CallbackContext context);
            void OnHapticDevice(InputAction.CallbackContext context);
            void OnAimPosition(InputAction.CallbackContext context);
            void OnAimRotation(InputAction.CallbackContext context);
            void OnAimFlags(InputAction.CallbackContext context);
            void OnPinchPosition(InputAction.CallbackContext context);
            void OnPokePosition(InputAction.CallbackContext context);
            void OnPokeRotation(InputAction.CallbackContext context);
        }
        public interface IRightHandActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnIsTracked(InputAction.CallbackContext context);
            void OnTrackingState(InputAction.CallbackContext context);
            void OnHapticDevice(InputAction.CallbackContext context);
            void OnAimPosition(InputAction.CallbackContext context);
            void OnAimRotation(InputAction.CallbackContext context);
            void OnAimFlags(InputAction.CallbackContext context);
            void OnPinchPosition(InputAction.CallbackContext context);
            void OnPokePosition(InputAction.CallbackContext context);
            void OnPokeRotation(InputAction.CallbackContext context);
        }
        public interface IHipActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnIsTracked(InputAction.CallbackContext context);
            void OnTrackingState(InputAction.CallbackContext context);
        }
        public interface ILeftFootActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnIsTracked(InputAction.CallbackContext context);
            void OnTrackingState(InputAction.CallbackContext context);
        }
        public interface IRightFootActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnIsTracked(InputAction.CallbackContext context);
            void OnTrackingState(InputAction.CallbackContext context);
        }
    }
}
